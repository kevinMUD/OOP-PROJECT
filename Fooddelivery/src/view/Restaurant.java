/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import Controller.RestaurentDao;
import Model.RestoEnum;
import Model.restaurent;
import java.awt.Desktop;
import java.awt.Image;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.plaf.InternalFrameUI;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Gisa
 * 
 */
public class Restaurant extends javax.swing.JInternalFrame {
DefaultTableModel md=new DefaultTableModel();
    /**
     * Creates new form Restaurant
     */
    public Restaurant() {
        initComponents();
        addItemToCombo();
        addColumns();
        retrieve();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Rname = new javax.swing.JTextField();
        Raddress = new javax.swing.JTextField();
        register = new javax.swing.JButton();
        RtypeCombo = new javax.swing.JComboBox<String>();
        jScrollPane1 = new javax.swing.JScrollPane();
        Rtable = new javax.swing.JTable();
        Read = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        update = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        photo = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        print = new javax.swing.JTextField();
        phot = new javax.swing.JLabel();
        regId = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Restaurent");
        setToolTipText("");

        jLabel1.setText("Name");

        jLabel2.setText("Address");

        jLabel3.setText("Type");

        Rname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RnameActionPerformed(evt);
            }
        });

        Raddress.setText("  ");

        register.setText("Save");
        register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerActionPerformed(evt);
            }
        });

        Rtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Rtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RtableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Rtable);

        Read.setText("Read");
        Read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jButton1.setText("Export to Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Export to pdf");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        photo.setText("Add Photo");
        photo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                photoActionPerformed(evt);
            }
        });

        jButton4.setText("print");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setText("PIN");

        phot.setBackground(new java.awt.Color(255, 255, 255));
        phot.setForeground(new java.awt.Color(255, 255, 255));
        phot.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(37, 37, 37)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(9, 9, 9)
                                                .addComponent(jButton4)
                                                .addGap(64, 64, 64)
                                                .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(register)
                                                .addGap(18, 18, 18)
                                                .addComponent(Read)
                                                .addGap(45, 45, 45)
                                                .addComponent(delete)
                                                .addGap(18, 18, 18)
                                                .addComponent(update)))
                                        .addGap(34, 34, 34)
                                        .addComponent(photo))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(34, 34, 34)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Raddress)
                                            .addComponent(Rname)
                                            .addComponent(RtypeCombo, 0, 114, Short.MAX_VALUE)
                                            .addComponent(regId))
                                        .addGap(107, 107, 107)
                                        .addComponent(phot, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(73, 73, 73))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(regId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(Rname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Raddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(RtypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(phot, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(register)
                    .addComponent(Read)
                    .addComponent(delete)
                    .addComponent(update)
                    .addComponent(photo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RnameActionPerformed
      
    }//GEN-LAST:event_RnameActionPerformed

    private void registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerActionPerformed
       restaurent resto =new restaurent();
        
        if(regId.getText().isEmpty()||RtypeCombo.getSelectedItem().toString().isEmpty()||Rname.getText().isEmpty()||Raddress.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Plz fill all fields");
        }else{
            try {
             
             File Image=new File(print.getText());
            FileInputStream inputStream=new FileInputStream(Image);
             ByteArrayOutputStream bos=new ByteArrayOutputStream();
            byte[] buf= new byte[1024];
            for(int readNumber; (readNumber=inputStream.read(buf))!=-1;){
                bos.write(buf,0,readNumber);
                byte[] Resto_image=null;
                
                Resto_image=bos.toByteArray();
                resto.setPhoto(Resto_image);
                
            }
             
                
                resto.setId(regId.getText());
                resto.setRestoType(RtypeCombo.getSelectedItem().toString());
                resto.setName(Rname.getText());
                resto.setFullAdress(Raddress.getText());
                RestaurentDao dao=new RestaurentDao();
                dao.save(resto);
                
             
         } catch (FileNotFoundException ex) {
             Logger.getLogger(Restaurant.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
             Logger.getLogger(Restaurant.class.getName()).log(Level.SEVERE, null, ex);
         }
            
        }
       
    }//GEN-LAST:event_registerActionPerformed

    private void RtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RtableMouseClicked
       
        try {
            int selectedRows=Rtable.getSelectedRow();
            regId.setText(md.getValueAt(selectedRows, 0).toString());
            RtypeCombo.setSelectedItem(md.getValueAt(selectedRows, 1).toString());
            Rname.setText(md.getValueAt(selectedRows, 2).toString());
            Raddress.setText(md.getValueAt(selectedRows, 3).toString());
            RestaurentDao dao=new RestaurentDao();
            byte[] img =(dao.Read().get(selectedRows).getPhoto());
            ImageIcon newImage=new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(phot.getWidth(), phot.getHeight(), Image.SCALE_DEFAULT));
            phot.setIcon(newImage);
           
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_RtableMouseClicked

    private void ReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadActionPerformed
       
      retrieve();  
    }//GEN-LAST:event_ReadActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        String reg=regId.getText();
        restaurent re=new restaurent();
        re.setId(reg);
        
        RestaurentDao dao=new RestaurentDao();
        
        if(dao.deleteVehicle(re)){
            JOptionPane.showMessageDialog(this, "Restaurent deleted successfully");
            retrieve();
        }else
        {
            JOptionPane.showMessageDialog(this, "Restaurent not deleted successfully");
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        
        restaurent resto=new restaurent();
        String Id=regId.getText();
        String type=RtypeCombo.getSelectedItem().toString();
        String name=Rname.getText();
        String Address=Raddress.getText();
        try {
            File image=new File(print.getText());
            FileInputStream inputStream=new FileInputStream(image);
             ByteArrayOutputStream bos=new ByteArrayOutputStream();
            byte[] buf= new byte[1024];
            for(int readNum; (readNum=inputStream.read(buf))!=-1;){
                bos.write(buf,0,readNum);
                byte[] Image=null;
                
                Image=bos.toByteArray();
                resto.setPhoto(Image);
            }    
                
                resto.setId(Id);
                resto.setName(name);
                resto.setFullAdress(Address);
                resto.setRestoType(type);

        
        RestaurentDao dao=new RestaurentDao();
        
        if(dao.update(resto)){
            JOptionPane.showMessageDialog(this, "Restaurent updated successfully");
            retrieve();
        }else
        {
            JOptionPane.showMessageDialog(this, "Restau not updated successfully");
        }
            }
         catch (Exception e) {
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_updateActionPerformed

    private void photoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_photoActionPerformed
        phot.removeAll();
        JFileChooser fileChooser=new JFileChooser();
        fileChooser.showOpenDialog(null);
        File f=fileChooser.getSelectedFile();
        String fileName=f.getAbsolutePath();
        print.setText(fileName);
        ImageIcon newImage=new ImageIcon(new ImageIcon(fileName).getImage().getScaledInstance(phot.getWidth(), phot.getHeight(), Image.SCALE_DEFAULT));
        phot.setIcon(newImage);
        
    }//GEN-LAST:event_photoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        exportExcell(Rtable);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String path="";
        JFileChooser choose=new JFileChooser();
        choose.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x=choose.showSaveDialog(this);
        
        if(x==JFileChooser.APPROVE_OPTION){
            path=choose.getSelectedFile().getPath();
        }
        
        Document doc=new Document();
        
         try {
             PdfWriter.getInstance(doc, new FileOutputStream(path+".pdf"));
             doc.open();
             PdfPTable table1=new PdfPTable(4);
             
             //Adding header
             table1.addCell("Reg Id");
             table1.addCell("Name");
             table1.addCell("Adress");
             table1.addCell("Restaurent Type");
             
             
             for(int i=0;i<Rtable.getRowCount();i++){
                 String RegId=Rtable.getValueAt(i, 0).toString();
                 String Names=Rtable.getValueAt(i, 1).toString();
                 String Address=Rtable.getValueAt(i, 2).toString();
                 String Type=Rtable.getValueAt(i, 3).toString();
                 
                 table1.addCell(RegId);
                 table1.addCell(Names);
                 table1.addCell(Address);
                 table1.addCell(Type);
                 
             }
             doc.add(table1);
             
         } catch (FileNotFoundException ex) {
             Logger.getLogger(Restaurant.class.getName()).log(Level.SEVERE, null, ex);
         } catch (DocumentException ex) {
             Logger.getLogger(Restaurant.class.getName()).log(Level.SEVERE, null, ex);
         }
             
          doc.close();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
//       Pdf_Viewer pdv = new Pdf_Viewer();
//       InternalFrameUI.createUI(pdv);
//       pdv.show();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void retrieve(){
       
       md.setRowCount(0);
        RestaurentDao dao=new RestaurentDao();
        List<restaurent> vehicles = dao.Read();
        Iterator<restaurent> vehicleIter = vehicles.iterator();
        
        try {
            while(vehicleIter.hasNext()){
                restaurent veh;
                veh = vehicleIter.next();
                md.addRow(new Object[]{
                    veh.getId(),
                    veh.getName(),
                    veh.getFullAdress(),
                    veh.getRestoType(),
                    veh.getPhoto()
                    
                });
//                byte[] img=veh.getPhoto();
//                ImageIcon image=new ImageIcon(img);
//                Image im=image.getImage();
//                Image myImg=im.getScaledInstance(vehiclePhoto.getWidth(), vehiclePhoto.getHeight(), Image.SCALE_DEFAULT);
//                ImageIcon newImage= new ImageIcon(myImg);
//                vehiclePhoto.setIcon(newImage);
            }
            Rtable.setModel(md);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    public void openFile(String file){
        try {
            File path=new File(file);
            Desktop.getDesktop().open(path);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void exportExcell(JTable table){
        try {
            JFileChooser choose=new JFileChooser();
            choose.showSaveDialog(table);
            File saveFile=choose.getSelectedFile();
            if(saveFile!=null){
                saveFile=new File(saveFile.toString()+".xlsx");
                Workbook wb=new XSSFWorkbook();
               Sheet sheet=wb.createSheet("Resto");
               Row rowCol=sheet.createRow(0);
               for(int i=0;i<table.getColumnCount();i++){
                   Cell cell=rowCol.createCell(i);
                   cell.setCellValue(table.getColumnName(i));
               }
               
               for(int j=0;j<table.getRowCount();j++){
                   Row row=sheet.createRow(j+1);
                   for(int k=0;k<table.getColumnCount();k++){
                       Cell cell=row.createCell(k);
                       if(table.getValueAt(j, k)!=null){
                           cell.setCellValue(table.getValueAt(j, k).toString());
                       }
                   }
               }
                FileOutputStream out=new FileOutputStream(new File(saveFile.toString()));
                wb.write(out);
                wb.close();
                out.close();
                openFile(saveFile.toString());
            }else{
                JOptionPane.showMessageDialog(null, "Error!!!!");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void addColumns(){
        Rtable.setModel(md);
        md.addColumn(" Id");
        md.addColumn(" Name");
        md.addColumn(" Address");
        md.addColumn(" Type");
        md.addColumn(" Photo");
    }
    
    private void addItemToCombo(){
        RtypeCombo.removeAllItems();
        for(RestoEnum category: RestoEnum.values()){
            RtypeCombo.addItem(category.toString());
        }
        RtypeCombo.setSelectedItem(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Raddress;
    private javax.swing.JButton Read;
    private javax.swing.JTextField Rname;
    private javax.swing.JTable Rtable;
    private javax.swing.JComboBox<String> RtypeCombo;
    private javax.swing.JButton delete;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel phot;
    private javax.swing.JButton photo;
    private javax.swing.JTextField print;
    private javax.swing.JTextField regId;
    private javax.swing.JButton register;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
